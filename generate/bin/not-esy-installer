'use strict';

// TODO: it can fail because of pnp inside of esy
// TODO: windows don't like that
// TODO: proper parser for opam.install

const fs = require('fs');
const exec = require('child_process').execSync;
const path = require('path');

const install_folder = process.env['cur__install'];
const target = process.argv[2];

const normalize_opam_to = (prefix, to) => {
  // TODO: check if exists some exception
  to = to.startsWith('../../') ? to.slice(3) : to;
  const DUNE_CROSS_PATTERN = /^\.\.\/(.*?)-sysroot\//;
  const match = DUNE_CROSS_PATTERN.exec(to);

  if (match) {
    const [, found_target] = match;
    to = to.replace(DUNE_CROSS_PATTERN, '');
    if (target !== found_target || !to.startsWith(prefix)) {
      throw new Error(`thats weird: ${to}`);
    }
    return to.slice(prefix.length + 1);
  }
  return to;
};
const get_prefix = (pkg_name, tag) => {
  const prefix = (() => {
    switch (tag) {
      case 'lib':
        return ['lib', pkg_name];
      case 'lib_root':
        return ['lib'];
      case 'libexec':
        return ['lib', pkg_name];
      case 'libexec_root':
        return ['lib'];
      case 'bin':
        return ['bin'];
      case 'sbin':
        return ['sbin'];
      case 'toplevel':
        return ['lib', 'toplevel'];
      case 'share':
        return ['share', pkg_name];
      case 'share_root':
        return ['share'];
      case 'etc':
        return ['etc', pkg_name];
      case 'doc':
        return ['doc', pkg_name];
      case 'stublibs':
        return ['lib', 'stublibs'];
      case 'man':
        return ['man'];
      default:
        throw new Error(`unknown tag: ${tag}`);
    }
  })();

  return path.join(...prefix);
};
const parse_tag = (opam_line) => {
  const match = /(.*):/.exec(opam_line);
  return match && match[1];
};
const parse_line = (opam_line) => {
  let match = /"(.*?)"/.exec(opam_line);
  if (!match) {
    return null;
  }
  const base_from = match[1];

  match = /\{"(.*?)"\}/.exec(opam_line);
  const base_to = (match && match[1]) || '.';
  return { base_from, base_to };
};
const parse = (pkg_name, opam_install) => {
  const lines = opam_install
    .split('\n')
    .map((line) => line.trim())
    .filter((line) => parse_tag(line) || parse_line(line));
  const files = lines.reduce(
    ([tag, files], line) => {
      // tag
      {
        const tag = parse_tag(line);
        if (tag) {
          return [tag, files];
        }
      }

      // file
      const prefix = get_prefix(pkg_name, tag);
      const { base_from: from, base_to } = parse_line(line);
      const install_directory = path.resolve(install_folder, prefix);
      const to = path.resolve(
        install_directory,
        base_to ? normalize_opam_to(prefix, base_to) : path.basename(from)
      );
      if (!to.startsWith(install_directory)) {
        throw new Error(`installing on the wrong place: ${to}`);
      }
      return [tag, [{ install_directory, from, to }, ...files]];
    },
    [null, []]
  )[1];
  // TODO: the file order matters?
  return files.reverse();
};

const sorted_uniq = (list) =>
  list.reduce((list, el) => (list[0] === el ? list : [el, ...list]), []);

const files = fs
  .readdirSync(process.cwd())
  .filter((file) => file.endsWith('.install'))
  .sort()
  .reverse()
  .flatMap((file) => {
    const name = path.parse(file).name;
    const data = fs.readFileSync(file).toString();
    const pkg_name = name.endsWith(`-${target}`)
      ? name.slice(0, -target.length - 1)
      : name;
    return parse(pkg_name, data);
  });

if (!files.length) {
  process.exit(0);
}

const folders = files.map((file) => path.parse(file.to).dir).sort();

exec(['mkdir', '-p', ...sorted_uniq(folders)].join(' '));
files.forEach(({ from, to }) => {
  // TODO: some files starts with? look at ocamlfind, I understood it as optional
  if (from.startsWith('?')) {
    from = from.slice(1);
    if (!fs.existsSync(from)) {
      return;
    }
  }
  from = path.resolve(from);
  exec(`ln -s -f ${from} ${to}`);
});

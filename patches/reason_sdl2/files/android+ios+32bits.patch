diff --git a/config/discover.ml b/config/discover.ml
deleted file mode 100644
index 4ed3a8e..0000000
--- a/config/discover.ml
+++ /dev/null
@@ -1,95 +0,0 @@
-
-type os =
-    | Windows
-    | Mac
-    | Linux
-    | Unknown
-
-let uname () =
-    let ic = Unix.open_process_in "uname" in
-    let uname = input_line ic in
-    let () = close_in ic in
-    uname;;
-
-let get_os =
-    match Sys.os_type with
-    | "Win32" -> Windows
-    | _ -> match uname () with
-        | "Darwin" -> Mac
-        | "Linux" -> Linux
-        | _ -> Unknown
-
-let root = Sys.getenv "cur__root"
-let c_flags = ["-I"; (Sys.getenv "SDL2_INCLUDE_PATH"); "-I"; Filename.concat root "include"; "-I"; Filename.concat root "src"]
-
-let c_flags = match get_os with
-    | Windows -> c_flags @ ["-mwindows"]
-    | Linux -> c_flags @ ["-fPIC"]
-    | _ -> c_flags
-;;
-
-let libPath = "-L" ^ (Sys.getenv "SDL2_LIB_PATH")
-
-let ccopt s = ["-ccopt"; s]
-let cclib s = ["-cclib"; s]
-
-let flags =
-    match get_os with
-    | Windows ->  []
-        @ ccopt(libPath)
-        @ cclib("-lSDL2")
-        @ cclib("-lgdi32")
-        @ cclib("-subsystem windows");
-    | Linux -> []
-        @ ccopt(libPath)
-        @ cclib("-lGL")
-        @ cclib("-lGLU")
-        @ cclib("-lSDL2")
-        @ cclib("-lX11")
-        @ cclib("-lXxf86vm")
-        @ cclib("-lXrandr")
-        @ cclib("-lXinerama")
-        @ cclib("-lXcursor")
-        @ cclib("-lpthread")
-        @ cclib("-lXi")
-    | _ -> []
-        @ ccopt(libPath)
-        @ cclib("-lSDL2")
-        @ ccopt("-framework AppKit")
-        @ ccopt("-framework Foundation")
-        @ ccopt("-framework OpenGL")
-        @ ccopt("-framework Cocoa")
-        @ ccopt("-framework IOKit")
-        @ ccopt("-framework CoreVideo")
-        @ ccopt("-framework CoreAudio")
-        @ ccopt("-framework AudioToolbox")
-        @ ccopt("-framework ForceFeedback")
-        @ ccopt("-framework Metal")
-        @ ccopt("-framework Carbon")
-        @ ccopt("-liconv")
-;;
-
-let c_library_flags =
-    match get_os with
-    | Linux -> [
-        libPath;
-        "-lSDL2";
-    ]
-    | Mac -> [
-        libPath;
-        "-lSDL2";
-    ]
-    | _ -> []
-
-let cxx_flags =
-    match get_os with
-    | Linux -> c_flags @ ["-std=c++11"]
-    | Windows -> c_flags @ ["-fno-exceptions"; "-fno-rtti"; "-lstdc++"; "-mwindows"]
-    | Mac -> c_flags @ ["-x"; "objective-c++"]
-    | _ -> c_flags
-;;
-
-Configurator.V1.Flags.write_sexp "c_library_flags.sexp" c_library_flags;
-Configurator.V1.Flags.write_sexp "c_flags.sexp" c_flags;
-Configurator.V1.Flags.write_sexp "cxx_flags.sexp" cxx_flags;
-Configurator.V1.Flags.write_sexp "flags.sexp" flags;
diff --git a/config/discover.re b/config/discover.re
new file mode 100644
index 0000000..5cf9854
--- /dev/null
+++ b/config/discover.re
@@ -0,0 +1,160 @@
+open Configurator.V1;
+
+type os =
+  | Android
+  | IOS
+  | Linux
+  | Mac
+  | Windows;
+
+let header_detect_system = {|
+  #if __APPLE__
+    #include <TargetConditionals.h>
+    #if TARGET_OS_IPHONE
+      #define PLATFORM_NAME "ios"
+    #else
+      #define PLATFORM_NAME "mac"
+    #endif
+  #elif __linux__
+    #if __ANDROID__
+      #define PLATFORM_NAME "android"
+    #else
+      #define PLATFORM_NAME "linux"
+    #endif
+  #elif WIN32
+    #define PLATFORM_NAME "windows"
+  #endif
+|};
+
+let get_os = t => {
+  let header = {
+    let file = Filename.temp_file("discover", "os.h");
+    let fd = open_out(file);
+    output_string(fd, header_detect_system);
+    close_out(fd);
+    file;
+  };
+  let platform =
+    C_define.import(
+      t,
+      ~includes=[header],
+      [("PLATFORM_NAME", String)],
+    );
+  switch (platform) {
+  | [(_, String("android"))] => Android
+  | [(_, String("ios"))] => IOS
+  | [(_, String("linux"))] => Linux
+  | [(_, String("mac"))] => Mac
+  | [(_, String("windows"))] => Windows
+  | _ => failwith("Unknown operating system")
+  };
+};
+
+let root = Sys.getenv("cur__root");
+let c_flags = [
+  "-I",
+  Sys.getenv("SDL2_INCLUDE_PATH"),
+  "-I",
+  Filename.concat(root, "include"),
+  "-I",
+  Filename.concat(root, "src"),
+];
+
+let c_flags = os =>
+  switch (os) {
+  | Linux => c_flags @ ["-fPIC"]
+  | Windows => c_flags @ ["-mwindows"]
+  | _ => c_flags
+  };
+
+let libPath = "-L" ++ Sys.getenv("SDL2_LIB_PATH");
+
+let ccopt = s => ["-ccopt", s];
+let cclib = s => ["-cclib", s];
+
+let flags = os =>
+  switch (os) {
+  | Android =>
+    []
+    @ ccopt(libPath)
+    @ cclib("-lEGL")
+    @ cclib("-lGLESv1_CM")
+    @ cclib("-lGLESv2")
+    @ cclib("-lSDL2")
+  | IOS =>
+    []
+    @ ccopt(libPath)
+    @ cclib("-lSDL2")
+    @ ccopt("-framework Foundation")
+    @ ccopt("-framework OpenGLES")
+    @ ccopt("-framework UIKit")
+    @ ccopt("-framework IOKit")
+    @ ccopt("-framework CoreVideo")
+    @ ccopt("-framework CoreAudio")
+    @ ccopt("-framework AudioToolbox")
+    @ ccopt("-framework Metal")
+    @ ccopt("-liconv")
+  | Linux =>
+    []
+    @ ccopt(libPath)
+    @ cclib("-lGL")
+    @ cclib("-lGLU")
+    @ cclib("-lSDL2")
+    @ cclib("-lX11")
+    @ cclib("-lXxf86vm")
+    @ cclib("-lXrandr")
+    @ cclib("-lXinerama")
+    @ cclib("-lXcursor")
+    @ cclib("-lpthread")
+    @ cclib("-lXi")
+  | Mac =>
+    []
+    @ ccopt(libPath)
+    @ cclib("-lSDL2")
+    @ ccopt("-framework AppKit")
+    @ ccopt("-framework Foundation")
+    @ ccopt("-framework OpenGL")
+    @ ccopt("-framework Cocoa")
+    @ ccopt("-framework IOKit")
+    @ ccopt("-framework CoreVideo")
+    @ ccopt("-framework CoreAudio")
+    @ ccopt("-framework AudioToolbox")
+    @ ccopt("-framework ForceFeedback")
+    @ ccopt("-framework Metal")
+    @ ccopt("-framework Carbon")
+    @ ccopt("-liconv")
+  | Windows =>
+    []
+    @ ccopt(libPath)
+    @ cclib("-lSDL2")
+    @ cclib("-lgdi32")
+    @ cclib("-subsystem windows")
+  };
+
+let c_library_flags = os =>
+  switch (os) {
+  | Windows => []
+  | _ => [libPath, "-lSDL2"]
+  };
+
+let cxx_flags = os =>
+  switch (os) {
+  | Android
+  | Linux => c_flags(os) @ ["-std=c++11"]
+  | IOS
+  | Mac => c_flags(os) @ ["-x", "objective-c++"]
+  | Windows =>
+    c_flags(os) @ ["-fno-exceptions", "-fno-rtti", "-lstdc++", "-mwindows"]
+  };
+
+let () =
+  main(~name="c_test", t => {
+    let os = get_os(t);
+    Flags.write_sexp(
+      "c_library_flags.sexp",
+      c_library_flags(os),
+    );
+    Flags.write_sexp("c_flags.sexp", c_flags(os));
+    Flags.write_sexp("cxx_flags.sexp", cxx_flags(os));
+    Flags.write_sexp("flags.sexp", flags(os));
+  });
diff --git a/src/sdl2.re b/src/sdl2.re
index 173593f..a1b1d14 100644
--- a/src/sdl2.re
+++ b/src/sdl2.re
@@ -301,6 +301,9 @@ module Scancode = {
 
 module Keycode = {
   type t = int;
+  // as some keycodes are bigger than 2^30 but still less than 2^31
+  // so by using the negative numbers we can fit them in a normal int
+  let int = Int32.to_int;
 
   external getName: t => string = "resdl_SDL_GetKeyName";
 
@@ -313,87 +316,87 @@ module Keycode = {
 
   // Incrementally add these as needed from:
   // https://wiki.libsdl.org/SDLKeycodeLookup
-  let unknown = 0;
-  let backspace = 8;
-  let return = 13;
-
-  let escape = 27;
-
-  let space = 32;
-
-  let left_paren = 40;
-  let right_paren = 41;
-
-  let asterisk = 42;
-  let plus = 43;
-  let minus = 45;
-  let period = 46;
-  let slash = 47;
-  let caret = 94;
-
-  let equals = 61;
-
-  let digit0 = 48;
-  let digit1 = 49;
-  let digit2 = 50;
-  let digit3 = 51;
-  let digit4 = 52;
-  let digit5 = 53;
-  let digit6 = 54;
-  let digit7 = 55;
-  let digit8 = 56;
-  let digit9 = 57;
-
-  let pad_divide = 1073741908;
-  let pad_multiply = 1073741909;
-  let pad_minus = 1073741910;
-  let pad_plus = 1073741911;
-  let pad_period = 1073741923;
-
-  let pad_equals = 1073741927;
-
-  let p_digit1 = 1073741913;
-  let p_digit2 = 1073741914;
-  let p_digit3 = 1073741915;
-  let p_digit4 = 1073741916;
-  let p_digit5 = 1073741917;
-  let p_digit6 = 1073741918;
-  let p_digit7 = 1073741919;
-  let p_digit8 = 1073741920;
-  let p_digit9 = 1073741921;
-  let p_digit0 = 1073741922;
-
-  let a = 97;
-  let b = 98;
-  let c = 99;
-  let d = 100;
-  let e = 101;
-  let f = 102;
-  let g = 103;
-  let h = 104;
-  let i = 105;
-  let j = 106;
-  let k = 107;
-  let l = 108;
-  let m = 109;
-  let n = 110;
-  let o = 111;
-  let p = 112;
-  let q = 113;
-  let r = 114;
-  let s = 115;
-  let t = 116;
-  let u = 117;
-  let v = 118;
-  let w = 119;
-  let x = 120;
-  let y = 121;
-  let z = 122;
-
-  let delete = 127;
-
-  let right = 1073741903;
-  let left = 1073741904;
+  let unknown = int(0l);
+  let backspace = int(8l);
+  let return = int(13l);
+
+  let escape = int(27l);
+
+  let space = int(32l);
+
+  let left_paren = int(40l);
+  let right_paren = int(41l);
+
+  let asterisk = int(42l);
+  let plus = int(43l);
+  let minus = int(45l);
+  let period = int(46l);
+  let slash = int(47l);
+  let caret = int(94l);
+
+  let equals = int(61l);
+
+  let digit0 = int(48l);
+  let digit1 = int(49l);
+  let digit2 = int(50l);
+  let digit3 = int(51l);
+  let digit4 = int(52l);
+  let digit5 = int(53l);
+  let digit6 = int(54l);
+  let digit7 = int(55l);
+  let digit8 = int(56l);
+  let digit9 = int(57l);
+
+  let pad_divide = int(1073741908l);
+  let pad_multiply = int(1073741909l);
+  let pad_minus = int(1073741910l);
+  let pad_plus = int(1073741911l);
+  let pad_period = int(1073741923l);
+
+  let pad_equals = int(1073741927l);
+
+  let p_digit1 = int(1073741913l);
+  let p_digit2 = int(1073741914l);
+  let p_digit3 = int(1073741915l);
+  let p_digit4 = int(1073741916l);
+  let p_digit5 = int(1073741917l);
+  let p_digit6 = int(1073741918l);
+  let p_digit7 = int(1073741919l);
+  let p_digit8 = int(1073741920l);
+  let p_digit9 = int(1073741921l);
+  let p_digit0 = int(1073741922l);
+
+  let a = int(97l);
+  let b = int(98l);
+  let c = int(99l);
+  let d = int(100l);
+  let e = int(101l);
+  let f = int(102l);
+  let g = int(103l);
+  let h = int(104l);
+  let i = int(105l);
+  let j = int(106l);
+  let k = int(107l);
+  let l = int(108l);
+  let m = int(109l);
+  let n = int(110l);
+  let o = int(111l);
+  let p = int(112l);
+  let q = int(113l);
+  let r = int(114l);
+  let s = int(115l);
+  let t = int(116l);
+  let u = int(117l);
+  let v = int(118l);
+  let w = int(119l);
+  let x = int(120l);
+  let y = int(121l);
+  let z = int(122l);
+
+  let delete = int(127l);
+
+  let right = int(1073741903l);
+  let left = int(1073741904l);
 };
 
 module WheelType = {
diff --git a/src/sdl2_wrapper.cpp b/src/sdl2_wrapper.cpp
index f838ab6..e0c748a 100644
--- a/src/sdl2_wrapper.cpp
+++ b/src/sdl2_wrapper.cpp
@@ -15,13 +15,14 @@
 #include "stb_image.h"
 
 #include <SDL2/SDL.h>
+#include <SDL2/SDL_config.h>
 #include <SDL2/SDL_syswm.h>
 
-#ifdef __APPLE__
+#if SDL_VIDEO_DRIVER_COCOA
 #import <Cocoa/Cocoa.h>
 #endif
 
-#ifdef WIN32
+#if WIN32
 #include <Windows.h>
 #include <fcntl.h>
 #include <io.h>
@@ -154,7 +155,7 @@ CAMLprim value resdl_SDL_Delay(value delay) {
   CAMLreturn(Val_unit);
 }
 
-#ifdef WIN32
+#if WIN32
 
 typedef enum PROCESS_DPI_AWARENESS {
   PROCESS_DPI_UNAWARE = 0,
@@ -186,7 +187,8 @@ CAMLprim value resdl_SDL_GetVersion() {
   CAMLlocal1(ret);
 
   const char *str;
-#ifdef __APPLE__
+// TODO: should we handle it differently for iOS?
+#if __APPLE__
   NSProcessInfo *pInfo = [NSProcessInfo processInfo];
   NSString *version = [pInfo operatingSystemVersionString];
   str = [version UTF8String];
@@ -208,24 +210,34 @@ CAMLprim value resdl_SDL_GetNativeWindow(value vWin) {
 
   void *pNativeWindow = NULL;
   switch (wmInfo.subsystem) {
-#ifdef WIN32
+#if SDL_VIDEO_DRIVER_WINDOWS
   case SDL_SYSWM_WINDOWS:
     pNativeWindow = (void *)wmInfo.info.win.window;
     break;
-#elif __APPLE__
+#endif
+#if SDL_VIDEO_DRIVER_UIKIT
+  case SDL_SYSWM_UIKIT:
+    pNativeWindow = (void *)wmInfo.info.uikit.window;
+    break;
+#endif
+#if SDL_VIDEO_DRIVER_COCOA
   case SDL_SYSWM_COCOA:
     pNativeWindow = (void *)wmInfo.info.cocoa.window;
     break;
-#else
+#endif
+#if SDL_VIDEO_DRIVER_ANDROID
+  case SDL_SYSWM_ANDROID:
+    pNativeWindow = (void *)wmInfo.info.android.window;
+#endif
+#if SDL_VIDEO_DRIVER_X11
   case SDL_SYSWM_X11:
     pNativeWindow = (void *)wmInfo.info.x11.window;
     break;
-    // TODO: Do we need a compilation flag to enable wayland support?
-    /*
-    case SDL_SYSWM_WAYLAND:
-      pNativeWindow = (void *)wmInfo.info.wl.surface;
-      break;
-    */
+#endif
+#if SDL_VIDEO_DRIVER_WAYLAND
+  case SDL_SYSWM_WAYLAND:
+    pNativeWindow = (void *)wmInfo.info.wl.surface;
+    break;
 #endif
   default:
     break;
@@ -234,7 +246,7 @@ CAMLprim value resdl_SDL_GetNativeWindow(value vWin) {
   CAMLreturn((value)pNativeWindow);
 };
 
-#ifdef WIN32
+#if WIN32
 
 // This method is calling after attach / alloc console
 // to wire up the new stdin/stdout/stderr.
@@ -278,7 +290,7 @@ void resdl_Win32AttachStdIO() {
 CAMLprim value resdl_SDL_WinAttachConsole() {
   CAMLparam0();
   int ret = 0;
-#ifdef WIN32
+#if WIN32
   // Only attach if we don't already have a stdout handle
   if (GetStdHandle(STD_OUTPUT_HANDLE) == NULL) {
     ret = AttachConsole(ATTACH_PARENT_PROCESS);
@@ -297,7 +309,7 @@ CAMLprim value resdl_SDL_WinAttachConsole() {
 CAMLprim value resdl_SDL_WinAllocConsole() {
   CAMLparam0();
   int ret = 0;
-#ifdef WIN32
+#if WIN32
   ret = AllocConsole();
   if (ret) {
     resdl_Win32AttachStdIO();
@@ -309,7 +321,7 @@ CAMLprim value resdl_SDL_WinAllocConsole() {
 CAMLprim value resdl_SDL_SetMacTitlebarTransparent(value vWin) {
   CAMLparam1(vWin);
 
-#ifdef __APPLE__
+#if SDL_VIDEO_DRIVER_COCOA
   SDL_Window *win = (SDL_Window *)vWin;
   SDL_SysWMinfo wmInfo;
   SDL_VERSION(&wmInfo.version);
@@ -328,7 +340,7 @@ CAMLprim value resdl_SDL_SetMacBackgroundColor(value vWin, value r, value g,
                                                value b, value a) {
   CAMLparam5(vWin, r, g, b, a);
 
-#ifdef __APPLE__
+#if SDL_VIDEO_DRIVER_COCOA
   SDL_Window *win = (SDL_Window *)vWin;
   SDL_SysWMinfo wmInfo;
   SDL_VERSION(&wmInfo.version);
@@ -349,7 +361,7 @@ CAMLprim value resdl_SDL_SetMacBackgroundColor(value vWin, value r, value g,
 CAMLprim value resdl_SDL_SetWin32ProcessDPIAware(value vWin) {
   CAMLparam1(vWin);
 
-#ifdef WIN32
+#if WIN32
   void *userDLL;
   BOOL(WINAPI * SetProcessDPIAware)(void); // Vista and later
   void *shcoreDLL;
@@ -384,7 +396,7 @@ CAMLprim value resdl_SDL_SetWin32ProcessDPIAware(value vWin) {
 CAMLprim value resdl_SDL_GetWin32ScaleFactor(value vWin) {
   CAMLparam1(vWin);
 
-#ifdef WIN32
+#if WIN32
   SDL_Window *win = (SDL_Window *)vWin;
   HWND hwnd = getHWNDFromSDLWindow(win);
   HMONITOR hmon = MonitorFromWindow(hwnd, MONITOR_DEFAULTTOPRIMARY);
@@ -1284,19 +1296,16 @@ CAMLprim value resdl_SDL_CreateWindow(value vName, value vX, value vY,
   // Attributes pulled from:
   // https://github.com/google/skia/blob/master/example/SkiaSDLExample.cpp
   static const int kStencilBits = 8; // Skia needs 8 stencil bits
+#if SDL_VIDEO_OPENGL
   SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
-#ifdef WIN32
-  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
-  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
-#elif __APPLE__
-  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
-  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);
 #else
-  // There's no guarantee that Linux 3.0 is available on Linux.
-  // ie, on my CentOS 6 box, with latest Intel drivers - only 2.1 is supported.
+  SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_ES);
+#endif
+
+  // that is the minimum version required
   SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
   SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
-#endif
+
   SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 8);
   SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 8);
   SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 8);
@@ -1373,7 +1382,7 @@ CAMLprim value resdl_SDL_IsWindowFullscreen(value vWin) {
   // SDL's fullscreen window flags don't work on macOS
   SDL_Window *win = (SDL_Window *)vWin;
   bool isFullscreen;
-#ifdef __APPLE__
+#if SDL_VIDEO_DRIVER_COCOA
   SDL_SysWMinfo wmInfo;
   SDL_VERSION(&wmInfo.version);
   SDL_GetWindowWMInfo(win, &wmInfo);

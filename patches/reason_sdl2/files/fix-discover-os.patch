diff --git a/config/discover.ml b/config/discover.ml
deleted file mode 100644
index 4ed3a8e..0000000
--- a/config/discover.ml
+++ /dev/null
@@ -1,95 +0,0 @@
-
-type os =
-    | Windows
-    | Mac
-    | Linux
-    | Unknown
-
-let uname () =
-    let ic = Unix.open_process_in "uname" in
-    let uname = input_line ic in
-    let () = close_in ic in
-    uname;;
-
-let get_os =
-    match Sys.os_type with
-    | "Win32" -> Windows
-    | _ -> match uname () with
-        | "Darwin" -> Mac
-        | "Linux" -> Linux
-        | _ -> Unknown
-
-let root = Sys.getenv "cur__root"
-let c_flags = ["-I"; (Sys.getenv "SDL2_INCLUDE_PATH"); "-I"; Filename.concat root "include"; "-I"; Filename.concat root "src"]
-
-let c_flags = match get_os with
-    | Windows -> c_flags @ ["-mwindows"]
-    | Linux -> c_flags @ ["-fPIC"]
-    | _ -> c_flags
-;;
-
-let libPath = "-L" ^ (Sys.getenv "SDL2_LIB_PATH")
-
-let ccopt s = ["-ccopt"; s]
-let cclib s = ["-cclib"; s]
-
-let flags =
-    match get_os with
-    | Windows ->  []
-        @ ccopt(libPath)
-        @ cclib("-lSDL2")
-        @ cclib("-lgdi32")
-        @ cclib("-subsystem windows");
-    | Linux -> []
-        @ ccopt(libPath)
-        @ cclib("-lGL")
-        @ cclib("-lGLU")
-        @ cclib("-lSDL2")
-        @ cclib("-lX11")
-        @ cclib("-lXxf86vm")
-        @ cclib("-lXrandr")
-        @ cclib("-lXinerama")
-        @ cclib("-lXcursor")
-        @ cclib("-lpthread")
-        @ cclib("-lXi")
-    | _ -> []
-        @ ccopt(libPath)
-        @ cclib("-lSDL2")
-        @ ccopt("-framework AppKit")
-        @ ccopt("-framework Foundation")
-        @ ccopt("-framework OpenGL")
-        @ ccopt("-framework Cocoa")
-        @ ccopt("-framework IOKit")
-        @ ccopt("-framework CoreVideo")
-        @ ccopt("-framework CoreAudio")
-        @ ccopt("-framework AudioToolbox")
-        @ ccopt("-framework ForceFeedback")
-        @ ccopt("-framework Metal")
-        @ ccopt("-framework Carbon")
-        @ ccopt("-liconv")
-;;
-
-let c_library_flags =
-    match get_os with
-    | Linux -> [
-        libPath;
-        "-lSDL2";
-    ]
-    | Mac -> [
-        libPath;
-        "-lSDL2";
-    ]
-    | _ -> []
-
-let cxx_flags =
-    match get_os with
-    | Linux -> c_flags @ ["-std=c++11"]
-    | Windows -> c_flags @ ["-fno-exceptions"; "-fno-rtti"; "-lstdc++"; "-mwindows"]
-    | Mac -> c_flags @ ["-x"; "objective-c++"]
-    | _ -> c_flags
-;;
-
-Configurator.V1.Flags.write_sexp "c_library_flags.sexp" c_library_flags;
-Configurator.V1.Flags.write_sexp "c_flags.sexp" c_flags;
-Configurator.V1.Flags.write_sexp "cxx_flags.sexp" cxx_flags;
-Configurator.V1.Flags.write_sexp "flags.sexp" flags;
diff --git a/config/discover.re b/config/discover.re
new file mode 100644
index 0000000..84a068e
--- /dev/null
+++ b/config/discover.re
@@ -0,0 +1,149 @@
+type os =
+  | Android
+  | IOS
+  | Linux
+  | Mac
+  | Windows;
+
+let get_os = t => {
+  let header = {
+    let file = Filename.temp_file("discover", "os.h");
+    let fd = open_out(file);
+    output_string(
+      fd,
+      {|
+        #if defined(__APPLE__)
+          #include <TargetConditionals.h>
+          #if defined(TARGET_OS_IPHONE)
+            #define PLATFORM_NAME "ios"
+          #else
+            #define PLATFORM_NAME "mac"
+          #endif
+        #elif defined(__linux__)
+          #if defined(__ANDROID__)
+            #define PLATFORM_NAME "android"
+          #else
+            #define PLATFORM_NAME "linux"
+          #endif
+        #elif defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
+          #define PLATFORM_NAME "windows"
+        #endif
+      |},
+    );
+    close_out(fd);
+    file;
+  };
+  let platform =
+    Configurator.V1.C_define.import(
+      t,
+      ~includes=[header],
+      [("PLATFORM_NAME", String)],
+    );
+  switch (platform) {
+  | [(_, String("android"))] => Android
+  | [(_, String("ios"))] => IOS
+  | [(_, String("linux"))] => Linux
+  | [(_, String("mac"))] => Mac
+  | [(_, String("windows"))] => Windows
+  | _ => failwith("Unknown operating system")
+  };
+};
+
+let root = Sys.getenv("cur__root");
+let c_flags = [
+  "-I",
+  Sys.getenv("SDL2_INCLUDE_PATH"),
+  "-I",
+  Filename.concat(root, "include"),
+  "-I",
+  Filename.concat(root, "src"),
+];
+
+let c_flags = os =>
+  switch (os) {
+  | Windows => c_flags @ ["-mwindows"]
+  | Linux => c_flags @ ["-fPIC"]
+  | _ => c_flags
+  };
+
+let libPath = "-L" ++ Sys.getenv("SDL2_LIB_PATH");
+
+let ccopt = s => ["-ccopt", s];
+let cclib = s => ["-cclib", s];
+
+let flags = os =>
+  switch (os) {
+  | Android =>
+    []
+    @ ccopt(libPath)
+    @ cclib("-lEGL")
+    @ cclib("-lGLESv1_CM")
+    @ cclib("-lGLESv2")
+    @ cclib("-lSDL2")
+  | IOS
+  | Mac =>
+    []
+    @ ccopt(libPath)
+    @ cclib("-lSDL2")
+    @ ccopt("-framework AppKit")
+    @ ccopt("-framework Foundation")
+    @ ccopt("-framework OpenGL")
+    @ ccopt("-framework Cocoa")
+    @ ccopt("-framework IOKit")
+    @ ccopt("-framework CoreVideo")
+    @ ccopt("-framework CoreAudio")
+    @ ccopt("-framework AudioToolbox")
+    @ ccopt("-framework ForceFeedback")
+    @ ccopt("-framework Metal")
+    @ ccopt("-framework Carbon")
+    @ ccopt("-liconv")
+  | Linux =>
+    []
+    @ ccopt(libPath)
+    @ cclib("-lGL")
+    @ cclib("-lGLU")
+    @ cclib("-lSDL2")
+    @ cclib("-lX11")
+    @ cclib("-lXxf86vm")
+    @ cclib("-lXrandr")
+    @ cclib("-lXinerama")
+    @ cclib("-lXcursor")
+    @ cclib("-lpthread")
+    @ cclib("-lXi")
+  | Windows =>
+    []
+    @ ccopt(libPath)
+    @ cclib("-lSDL2")
+    @ cclib("-lgdi32")
+    @ cclib("-subsystem windows")
+  };
+
+let c_library_flags = os =>
+  switch (os) {
+  | Windows => []
+  | _ => [libPath, "-lSDL2"]
+  };
+
+let cxx_flags = os =>
+  switch (os) {
+  | Android
+  | Linux => c_flags(os) @ ["-std=c++11"]
+  | IOS
+  | Mac => c_flags(os) @ ["-x", "objective-c++"]
+  | Windows =>
+    c_flags(os) @ ["-fno-exceptions", "-fno-rtti", "-lstdc++", "-mwindows"]
+  };
+
+let () =
+  Configurator.V1.(
+    main(~name="c_test", t => {
+      let os = get_os(t);
+      Configurator.V1.Flags.write_sexp(
+        "c_library_flags.sexp",
+        c_library_flags(os),
+      );
+      Configurator.V1.Flags.write_sexp("c_flags.sexp", c_flags(os));
+      Configurator.V1.Flags.write_sexp("cxx_flags.sexp", cxx_flags(os));
+      Configurator.V1.Flags.write_sexp("flags.sexp", flags(os));
+    })
+  );
